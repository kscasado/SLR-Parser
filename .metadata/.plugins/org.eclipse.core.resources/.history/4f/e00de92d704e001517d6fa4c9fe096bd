import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Stack;

public class Compile {
	public class StackStruct {
		public String symbol;
		public Integer state;

		public StackStruct(String s, int st) {
			symbol = s;
			state = st;
		}
	}

	private SLRTable slr;
	private Grammar grammar;
	private String text;
	private ArrayList<String> SpecialCase = new ArrayList<String>();
	private ArrayList<String> KEYS;
	private Stack<String> stack= new Stack<String>();
	private ArrayList<String> tree = new ArrayList<String>();

	public Compile(SLRTable S, Grammar G, String textFile) throws IOException {
		slr = S;
		grammar = G;
		KEYS = getKeywords();
		specialCases();
		text = readFile(textFile);

		modifyText();
		System.out.println(text);
		makeLexar();
		for(String str: tree){
			System.out.println(str);
		}
	}

	public void specialCases() {
		SpecialCase.add("(");
		SpecialCase.add(")");
		SpecialCase.add("{");
		SpecialCase.add("}");
		SpecialCase.add("id");
		SpecialCase.add("[");
		SpecialCase.add("]");
		SpecialCase.add("+");
		SpecialCase.add("*");
		SpecialCase.add("=");
		SpecialCase.add("/");
	}

	public void modifyText() {
		// remove comments
		text = text.replaceAll("/\\*(?:.|[\\n\\r])*?\\*/", "");
		// remove newlines
		text = text.replaceAll("\n", " ");
		// remove tabs
		text = text.replaceAll("\t", " ");
		// text = text.replaceAll("[(]", " ( ");
		// space out identifiers
		spaceWords();
		parseIDs();
		text = text.replace("  ", " ");
		System.out.println();
		
	}

	public void parseIDs() {
		// for numbers
		String newString = "";
		text = text.replaceAll(",", " , ");
		text = text.replaceAll("\\d+", " num ");

		for (String s : text.split("\\s+")) {
			if (!grammar.terminals.contains(s.trim()) && !s.equals("")) {
				newString += " id ";
			} else {
				newString += " " + s.trim() + " ";
			}
		}

		text = "";
		text = newString;
	}

	public void spaceWords() {
		for (String s : grammar.getTerminals()) {
			if (!s.isEmpty()) {
				if (!SpecialCase.contains(s.trim())) {
					text = text.replace(s.trim(), " " + s.trim() + " ");

				} else if (s.trim().equals("id")) {
					text = text.replaceAll("void", " " + "void" + "");
					text = text.replaceAll("\\s+id\\s+", " " + "id" + "");
				} else if (s.trim().equals("=")) {
					text = text.replaceAll("\\==", " == ");
					text = text.replaceAll("\\=^=", " = ");
				} else {
					text = text.replaceAll("\\" + s.trim(), " " + s.trim() + " ");
				}

			}
		}
	}

	// get all the keywords for C-
	public ArrayList<String> getKeywords() {
		ArrayList<String> l = new ArrayList<String>();
		l.add("else");
		l.add("if");
		l.add("int");
		l.add("return");
		l.add("void");
		l.add("white");
		return l;
	}

	public String readFile(String textFile) throws IOException {

		BufferedReader br = new BufferedReader(new FileReader(textFile));
		try {
			StringBuilder sb = new StringBuilder();
			String line = br.readLine();

			while (line != null) {
				sb.append(line);
				sb.append("\n");
				line = br.readLine();
			}
			return sb.toString();
		} finally {
			br.close();
		}
	}

	// deal with the crap
	public void makeLexar() {
		System.out.println("Why");
		stack.push("0");
		for (String str : text.split("\\s+")) {
			if(!str.isEmpty()){
				if (!compute(str.trim())) {
					System.out.println("Consumed: "+str);
					
					System.out.print("Tree:");
					for(String s: tree){
						System.out.println(s);
					}
				}
				else{
					break;
				}
			}
			

		}

	}

	public boolean compute(String token) {
		while (true) {
			StackStruct move = getMove(token, stack.peek());
			
			if (move.symbol.equals("Invalid")) {
				return false;
			} else {

				if (move.symbol.equals("G")) {
					System.out.println("Got into goto"+move.state.toString()+"Item: "+token);
					stack.push(move.state.toString());
					
				} else if (move.symbol.equals("S")) {
					System.out.println("Got into shift"+move.state.toString()+"Item: "+token);
					stack.push(token);
					stack.push(move.state.toString());
					break;
				} else if (move.symbol.equals("R")) {
					System.out.println("Got into Reduce"+move.state.toString()+"Item: "+token);
					reductionMove(move);
					break;
				}
			}
		}
		
		return true;

	}

	public void reductionMove(StackStruct move) {
		String var = slr.productions.get(move.state);
		String lhs = var.trim().split("::")[0];
		// parse out the rhs, then get that length
		int length = var.trim().split("::")[1].split("\\s+").length;
		length *= 2;
		for (int i = 0; i < length; i++) {
			String throwaway = stack.pop();
		}
		tree.add(" Production #: " + move.state + " Production: " + var);
		System.out.println(" Production #: " + move.state + " Production: " + var);
		String holder = stack.peek();
		stack.push(lhs);
		stack.push(getShift(lhs,holder));
	}
	public String getShift(String Symbol, String stateNum){
		System.out.println(stateNum);
		for(Item it: slr.stateList.get(Integer.parseInt(stateNum))){
			System.out.print(Symbol+"="+it.symbol);
			if(it.symbol.trim().equals(Symbol.trim())){
				
				return String.valueOf(it.state);
			}
			System.out.println("fails");
		}
		return "-1";
	}
	public StackStruct getMove(String item, String state) {
		System.out.println("GetMove("+item+","+state+")");
		
		for (Item it : slr.stateList.get(Integer.parseInt(state.trim()))) {
			//System.out.print(it.symbol+"="+item);
			if (it.symbol.equals(item)) {
				
				return (new StackStruct(it.command, it.state));
			}
			
		}
		System.out.println("Failed State: "+state+"Symbol:"+item);
		return new StackStruct("Invalid", -1);
	}
}
