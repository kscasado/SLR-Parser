import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Set;
//Assuming a grammar is given in a text file and 
//uses :: to signify a production, given the usual 
//best practice having Variables as capitals and symbols as
//non-capital characters/symbols
public class Grammar {
	public Grammar(String fileName){
		try{
			getProductionsFromFile(fileName);
			findTerminalsAndVarsFromList();
			findFirstFromList();
			findFollowFromList();
		}
		catch(Exception e){
			e.printStackTrace();
		}
		
		
	}
	private void getProductionsFromFile(String name)throws IOException{
		String fileText;
		try {
			FileReader inputFile = new FileReader(name);
			BufferedReader br = new BufferedReader(inputFile);
			
			while((fileText=br.readLine())!=null){
				productions.add(fileText);
			}
		}
		catch(IOException e){
			e.printStackTrace();
		}
	}
	//go through the list and find all the terminals
	private void findTerminalsAndVarsFromList(){
		//iterate through productions identifying terminals
		for(String s : productions){
			for(int i = 0; i<s.length();i++){
				//check if it is capital
				if(s.charAt(i)<'A'||s.charAt(i)>'Z'||s.charAt(i)!=':'){
					//Using Sets, so no duplication check needed
					terminals.add(String.valueOf(s.charAt(i)));
				}
				else if(s.charAt(i)!=':') {
					variables.add(String.valueOf(s.charAt(i)));
				}
				
				
			}
		}
	}
	
	
	private void findFirstFromList(){
		for(String s:productions){
			
		}
	}
	private void findFollowFromList(){
		
	}
	public ArrayList<String> getFollow(){
		return Follow;
	}
	public ArrayList<String> getFirst(){
		return First;
	}
	private Set<String> terminals;
	private Set<String> variables;
	private ArrayList<String> productions;
	private ArrayList<String> First;
	private ArrayList<String> Follow;
}
